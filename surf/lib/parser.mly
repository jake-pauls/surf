(** *.mly is the parser generated by Menhir *)

(** token that represents an integer *)
%token <int> INT

(** token that represents math operations *)
%token PLUS MINUS MULT DIV

(** tokens that represent parentheses *)
%token LPAREN RPAREN

(** token that the parser handles to represent the end of the file *)
%token EOF

(** precedence of operators is determined by the placement of associativty tokens
    higher up in the file is lower precedence, lower in the file is higher *)

(** tell the parser how to handle the associtivity of operands *)
%left MINUS
%left PLUS
%left MULT
%left DIV

(** unary minus operators [ie: -1] are non-associative and have the highest precedence *)
%nonassoc UMINUS

(** the program - it returns an expression when it's complete *)
%start <Ast.expr> prog

%%

prog:
    | e = expr; EOF { e } (** return an expression when the end of file is hit *)
    ;

expr:
    | i = INT { Int i }
    | e1 = expr; PLUS; e2 = expr { Binop (Add, e1, e2) }
    | e1 = expr; MINUS; e2 = expr { Binop (Minus, e1, e2) }
    | e1 = expr; MULT; e2 = expr { Binop (Mult, e1, e2) }
    | e1 = expr; DIV; e2 = expr { Binop (Div, e1, e2) }
    | MINUS; e = expr; %prec UMINUS { Unop (Minus, e) }
    | LPAREN; e = expr; RPAREN { e }
    ;
